# -*- coding: utf-8 -*-
"""Modulo para la graficación de vectores.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Icwf-1baCl2S4iqdV3jvOdqKVcpz-wPV

<p><img alt="logo.fua" height="100px" src="https://www.uamerica.edu.co/wp-content/images/escudo.png" align="left" hspace="10px" vspace="0px"></p>

<p><img alt="logo.fua" height="26px" src="https://mirrors.creativecommons.org/presskit/buttons/88x31/svg/by-nd.svg" align="right" hspace="0px" vspace="11px"></p>


# <center> <font size="6"> &nbsp;  &nbsp; &nbsp;  &nbsp; &nbsp;  &nbsp; &nbsp;  &nbsp; &nbsp;  &nbsp;**ÁLGEBRA LINEAL CON PYTHON &nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;     &nbsp; &nbsp;  &nbsp; MÓDULO PARA LA GRAFICACIÓN DE VECTORES** &nbsp;  &nbsp; &nbsp;  &nbsp; &nbsp;  &nbsp; &nbsp;  &nbsp; <center> &nbsp; &nbsp; &nbsp; &nbsp;*Jhonny Osorio Gallego* &nbsp; &nbsp; &nbsp;<p></font>

El siguiente módulo esta diseñado haciendo uso de la librería **NumPy** y **Plotly**, pretende servir de apoyo para la representación gráfica de vectores en el plano y el espacio, como estratégia para la enseñanza de los concéptos vectoriales.

## **FUNCIÓN PARA GENERAR COLORES RGB ALEATORIAMENTE**
"""

import random 
def randomRgbaColor(): 
   r = random.randrange(0, 255) 
   g = random.randrange(0, 255)  
   b =random.randrange(0, 255)
   return "rgb"+ "(" + str(r) + "," + str(g) + ","+ str(b) + ")"

"""## **DEFINICIÓN DE LA FUNCIÓN PARA GRAFICAR MULTIPLES VECTORES FIJOS EN EL PLANO**

La función tiene como sintaxis **plotvectorsf2D** permite graficar multiples vectores en el plano cartesiano.
"""

import plotly.graph_objects as go
import numpy as np


def plotvectorsf2D(*args):
    '''Función elaborada en el módulo plotly para realizar la gráfica de multiples vectores en el plano cartesiano'''
    
    fig = go.Figure()
    x = [0]
    y = [0]
    for V in args:
        color = randomRgbaColor()
        x.append(V[0])
        y.append(V[1])
        #fig.add_trace(go.Scatter(x=[V[0]],y=[V[1]],mode='markers',marker=dict(color= color,size=7),showlegend=True,name="vector "+ str(args.index(V)+1)))
        fig.add_trace(go.Scatter(x=[0,V[0]], y=[0,V[1]],mode='lines',marker=dict(color= color,size=8),showlegend=True,name="vector "+ str(args.index(V)+1)))
        fig.add_annotation(
        x=V[0],  # Coordenada en x cabeza
        y=V[1],  # Coordenada en y cabeza
        ax=0.0,  # Coordenada en x de la cola
        ay=0.0,  # Coordenada en x de la cola
        xref='x',
        yref='y',
        axref='x',
        ayref='y',
        showarrow=True,
        arrowhead=2,
        arrowsize=1.5,
        arrowwidth=2.3,
        arrowcolor = color)
        
    fig.add_trace(go.Scatter(x=[0],y=[0],mode='markers',marker=dict(color="#2a3f5f",size=9),showlegend=True,opacity=1,name="origen"))

    fig.add_annotation(ax = min(x)-0.5, axref = 'x', ay = 0, ayref = 'y',x = max(x)+0.5, xref = 'x', y = 0, yref = 'y',arrowwidth = 1.5, arrowhead = 2,arrowcolor = "#2a3f5f")
    fig.add_annotation(ax = 0, axref = 'x', ay = min(y)-0.5, ayref = 'y',x = 0, xref = 'x', y = max(y)+0.5, yref = 'y',arrowwidth = 1.5, arrowhead = 2,arrowcolor = "#2a3f5f")
    fig.add_annotation(text="$x$", x=max(x)+0.5, y=-0.2, arrowhead=1, showarrow=False)
    fig.add_annotation(text="$y$", x=-0.2, y=max(y)+0.5, arrowhead=1, showarrow=False)

    fig.update_xaxes(title = "$\large{x}$", title_font=dict(size=30, family='latex', color='rgb(1,21,51)'),range = [min(x)-0.5, max(x)+0.5],showgrid = True) #,zerolinecolor="black" ,autorange = True
    fig.update_yaxes(title = "$\large{y}$", title_font=dict(size=30, family='latex', color='rgb(1,21,51)'),range = [min(y)-0.4, max(y)+0.5],showgrid = True) #, zerolinecolor= "black" ,autorange = True
    fig.update_layout(font=dict(family="latex",size=20,color="black")) #y=1.2,x=0.03
    #fig.update_layout(title= "",title_font=dict(size=5, family='latex', color='rgb(1,21,51)'),title_x=0.5)
    fig.update_layout(legend=dict(orientation="h",yanchor="bottom",y=1.02,xanchor="right",x=1, itemdoubleclick ="toggle"),title_font=dict(size=30, color='rgb(1,21,51)'),showlegend=True,width=500, height=480)
    fig.show()

plotvectorsf2D([1,2],[-3,2],[5,3],[-1,-4],[2,-4])



"""## **DEFINICIÓN DE LA FUNCIÓN PARA GRAFICAR MULTIPLES VECTORES FIJOS EN EL ESPACIO**
La función tiene como sintaxis **plotvectorsf3D** permite graficar multiples vectores en el plano cartesiano.
"""

import plotly.graph_objs as go
from plotly.offline import plot
import numpy as np


def plotvectorsf3D(*args):
    '''Función elaborada en el módulo plotly para realizar la gráfica de multiples vectores en el espacio'''
    data = []
    x = [0]
    y = [0]
    z = [0.3,-0.3]
    for V in args:
        x.append(V[0])
        y.append(V[1])
        z.append(V[2])
        color = randomRgbaColor()
        vector = go.Scatter3d( 
        x = [0,V[0]],
        y = [0,V[1]],
        z = [0,V[2]],
        marker = dict( size = 1,color= color),
        line = dict( color= color, width = 7),name="vector "+ str(args.index(V)+1))
        
        paleta = [[0, color],[1, color]]

        cono = go.Cone(x=[V[0]], y=[V[1]], z=[V[2]], u=[V[0]], v=[V[1]], w=[V[2]],sizemode="absolute",sizeref=0.5,anchor="cm",
               showscale=False,
               colorscale=paleta,
               colorbar=dict(thickness=20, ticklen=4),
               name="vector "+ str(args.index(V)+1))
        
        data += [vector,cono]
        layout = go.Layout(margin = dict( l = 0,r = 0,b = 0,t = 0))

    paleta2 = [[0, "#2a3f5f"],[1, "#2a3f5f"]]
    point = go.Scatter3d( x = [0],y = [0],z = [0], mode='markers',marker=dict(color= "#2a3f5f",size=5),showlegend=True,name="origen")
    
    axex = go.Scatter3d( 
        x = [min(x), max(x)],
        y = [0,0],
        z = [0,0],
        hoverinfo = "skip",
        marker = dict( size = 1,color= "#2a3f5f"),
        line = dict( color= "#2a3f5f", width = 3), showlegend=False,name="")
    
    
    conox = go.Cone(x=[max(x)], y=[0], z=[0], u=[max(x)], v=[0], w=[0],sizemode="absolute",sizeref=0.3,anchor="cm",
               showscale=False,
               colorscale=paleta2,
               hoverinfo = "name",
               colorbar=dict(thickness=20, ticklen=4),name="Eje x-positivo")
    
    axey = go.Scatter3d( 
        x = [0,0],
        y = [min(y),max(y)],
        z = [0,0],
        hoverinfo = "skip",
        marker = dict( size = 1,color="#2a3f5f"),
        line = dict( color= "#2a3f5f", width = 3), showlegend=False,name="")
    
    conoy = go.Cone(x=[0], y=[max(y)], z=[0], u=[0], v=[max(y)], w=[0],sizemode="absolute",sizeref=0.3,anchor="cm",
               showscale=False,
               colorscale=paleta2,
               hoverinfo = "name",
               colorbar=dict(thickness=20, ticklen=4),
               name="Eje y-positivo ")
    
    axez = go.Scatter3d( 
        x = [0,0],
        y = [0,0],
        z = [min(z)-0.5,max(z)],
        hoverinfo = "skip",
        marker = dict( size = 1,color= "#2a3f5f"),
        line = dict( color= "#2a3f5f", width = 3), showlegend=False,name="eje z-positivo")
    
    conoz = go.Cone(x=[0], y=[0], z=[max(z)], u=[0], v=[0], w=[max(z)],sizemode="absolute",sizeref=0.3,anchor="cm",
               showscale=False,
               colorscale=paleta2,
               hoverinfo= "name",
               colorbar=dict(thickness=20, ticklen=4),
               name="Eje z-positivo")
    
    
    #plano = go.Surface(x = np.linspace(min(x),max(x),500), y = np.linspace(min(y),max(y),500) ,z = np.zeros(500),showscale=False)

    fig = go.Figure(data= data + [point, axex, conox, axey, conoy, axez, conoz] ,layout=layout)


    fig.update_layout(legend=dict(orientation="h",y=1.3,x=0.03),title_font=dict(size=50, color='rgb(1,21,51)'),showlegend=True,width=480, height=480)


    plot(fig,image_height=800,image_width=800)
    fig.show()

plotvectorsf3D([1,2,-3],[2,-3,1],[-2,-4,5])

"""## **DEFINICIÓN DE LA FUNCIÓN PARA GRAFICAR MULTIPLES VECTORES LIBRES EN EL PLANO**
La función tiene como sintaxis **plotvectorsl2D** permite graficar multiples vectores libres en el plano cartesiano.
"""

import plotly.graph_objects as go
import numpy as np


def plotvectorsl2D(*args):
    '''Función elaborada en el módulo plotly para realizar la gráfica de multiples vectores en el plano cartesiano'''
    
    fig = go.Figure()
    x = [0]
    y = [0]
    for V in args:
        color = randomRgbaColor()
        x.append(V[0][0])
        x.append(V[1][0])
        y.append(V[0][1])
        y.append(V[1][1])
        #fig.add_trace(go.Scatter(x=[V[0]],y=[V[1]],mode='markers',marker=dict(color= color,size=7),showlegend=True,name="vector "+ str(args.index(V)+1)))
        fig.add_trace(go.Scatter(x=[V[0][0],V[1][0]], y=[V[0][1],V[1][1]],mode='lines',marker=dict(color= color,size=8),showlegend=True,name="vector "+ str(args.index(V)+1)))
        fig.add_annotation(
        x=V[1][0],  # Coordenada en x cabeza
        y=V[1][1],  # Coordenada en y cabeza
        ax=V[0][0],  # Coordenada en x de la cola
        ay=V[0][1],  # Coordenada en y de la cola
        xref='x',
        yref='y',
        axref='x',
        ayref='y',
        showarrow=True,
        arrowhead=2,
        arrowsize=1.5,
        arrowwidth=2.3,
        arrowcolor = color)
        
    fig.add_trace(go.Scatter(x=[0],y=[0],mode='markers',marker=dict(color="#2a3f5f",size=9),showlegend=True,opacity=1,name="origen"))

    fig.add_annotation(ax = min(x)-0.5, axref = 'x', ay = 0, ayref = 'y',x = max(x)+0.5, xref = 'x', y = 0, yref = 'y',arrowwidth = 1.5, arrowhead = 2,arrowcolor = "#2a3f5f")
    fig.add_annotation(ax = 0, axref = 'x', ay = min(y)-0.5, ayref = 'y',x = 0, xref = 'x', y = max(y)+0.5, yref = 'y',arrowwidth = 1.5, arrowhead = 2,arrowcolor = "#2a3f5f")
    fig.add_annotation(text="$x$", x=max(x)+0.5, y=-0.2, arrowhead=1, showarrow=False)
    fig.add_annotation(text="$y$", x=-0.2, y=max(y)+0.5, arrowhead=1, showarrow=False)

    fig.update_xaxes(title = "$\large{x}$", title_font=dict(size=30, family='latex', color='rgb(1,21,51)'),range = [min(x)-0.5, max(x)+0.5],showgrid = True) #,zerolinecolor="black" ,autorange = True
    fig.update_yaxes(title = "$\large{y}$", title_font=dict(size=30, family='latex', color='rgb(1,21,51)'),range = [min(y)-0.4, max(y)+0.5],showgrid = True) #, zerolinecolor= "black" ,autorange = True
    fig.update_layout(font=dict(family="latex",size=20,color="black")) #y=1.2,x=0.03
    #fig.update_layout(title= "",title_font=dict(size=5, family='latex', color='rgb(1,21,51)'),title_x=0.5)
    fig.update_layout(legend=dict(orientation="h",yanchor="bottom",y=1.02,xanchor="right",x=1, itemdoubleclick ="toggle"),title_font=dict(size=30, color='rgb(1,21,51)'),showlegend=True,width=500, height=480)
    fig.show()

plotvectorsl2D([(1,2),(3,4)],[(3,4),(2,2)],[(2,2),(0,0)],[(0,0),(1,2)])

"""## **DEFINICIÓN DE LA FUNCIÓN PARA GRAFICAR MULTIPLES VECTORES LIBRES O FIJOS EN EL PLANO**
La función tiene como sintaxis **plotvectors2D** permite graficar multiples vectores libres en el plano cartesiano.
"""

def plotvectors2D(*args):
    fig = go.Figure()
    x = [0]
    y = [0]
    for V in args:
        if type(V[0]) == int or type(V[0]) == float :
            color = randomRgbaColor()
            x.append(V[0])
            y.append(V[1])
            #fig.add_trace(go.Scatter(x=[V[0]],y=[V[1]],mode='markers',marker=dict(color= color,size=7),showlegend=True,name="vector "+ str(args.index(V)+1)))
            fig.add_trace(go.Scatter(x=[0,V[0]], y=[0,V[1]],mode='lines',marker=dict(color= color,size=8),showlegend=True,name="vector "+ str(args.index(V)+1)))
            fig.add_annotation(
            x=V[0],  # Coordenada en x cabeza
            y=V[1],  # Coordenada en y cabeza
            ax=0.0,  # Coordenada en x de la cola
            ay=0.0,  # Coordenada en x de la cola
            xref='x',
            yref='y',
            axref='x',
            ayref='y',
            showarrow=True,
            arrowhead=2,
            arrowsize=1.5,
            arrowwidth=2.3,
            arrowcolor = color)
        else:
            color = randomRgbaColor()
            x.append(V[0][0])
            x.append(V[1][0])
            y.append(V[0][1])
            y.append(V[1][1])
            #fig.add_trace(go.Scatter(x=[V[0]],y=[V[1]],mode='markers',marker=dict(color= color,size=7),showlegend=True,name="vector "+ str(args.index(V)+1)))
            fig.add_trace(go.Scatter(x=[V[0][0],V[1][0]], y=[V[0][1],V[1][1]],mode='lines',marker=dict(color= color,size=8),showlegend=True,name="vector "+ str(args.index(V)+1)))
            fig.add_annotation(
            x=V[1][0],  # Coordenada en x cabeza
            y=V[1][1],  # Coordenada en y cabeza
            ax=V[0][0],  # Coordenada en x de la cola
            ay=V[0][1],  # Coordenada en y de la cola
            xref='x',
            yref='y',
            axref='x',
            ayref='y',
            showarrow=True,
            arrowhead=2,
            arrowsize=1.5,
            arrowwidth=2.3,
            arrowcolor = color)

    fig.add_trace(go.Scatter(x=[0],y=[0],mode='markers',marker=dict(color="#2a3f5f",size=9),showlegend=True,opacity=1,name="origen"))

    fig.add_annotation(ax = min(x)-0.5, axref = 'x', ay = 0, ayref = 'y',x = max(x)+0.5, xref = 'x', y = 0, yref = 'y',arrowwidth = 1.5, arrowhead = 2,arrowcolor = "#2a3f5f")
    fig.add_annotation(ax = 0, axref = 'x', ay = min(y)-0.5, ayref = 'y',x = 0, xref = 'x', y = max(y)+0.5, yref = 'y',arrowwidth = 1.5, arrowhead = 2,arrowcolor = "#2a3f5f")
    fig.add_annotation(text="$x$", x=max(x)+0.5, y=-0.2, arrowhead=1, showarrow=False)
    fig.add_annotation(text="$y$", x=-0.2, y=max(y)+0.5, arrowhead=1, showarrow=False)

    fig.update_xaxes(title = "$\large{x}$", title_font=dict(size=30, family='latex', color='rgb(1,21,51)'),range = [min(x)-0.5, max(x)+0.5],showgrid = True) #,zerolinecolor="black" ,autorange = True
    fig.update_yaxes(title = "$\large{y}$", title_font=dict(size=30, family='latex', color='rgb(1,21,51)'),range = [min(y)-0.4, max(y)+0.5],showgrid = True) #, zerolinecolor= "black" ,autorange = True
    fig.update_layout(font=dict(family="latex",size=20,color="black")) #y=1.2,x=0.03
    #fig.update_layout(title= "",title_font=dict(size=5, family='latex', color='rgb(1,21,51)'),title_x=0.5)
    fig.update_layout(legend=dict(orientation="h",yanchor="bottom",y=1.02,xanchor="right",x=1, itemdoubleclick ="toggle"),title_font=dict(size=30, color='rgb(1,21,51)'),showlegend=True,width=500, height=480)
    fig.show()

plotvectors2D([1,2],[(1,2),(3,4)],[3,4],[2,2])